from django.contrib.auth.base_user import AbstractBaseUser
from django.contrib.auth.models import AbstractUser, PermissionsMixin
from django.core.validators import RegexValidator
from django.db import models
from django.utils.translation import ugettext_lazy as _

from .managers import UserManager as webappUsermanager


# Create your models here.

class User(AbstractBaseUser, PermissionsMixin):
    """
    Custom Django User model based on AbstractBaseUser
    This custom model:
        - removes the username
        - adds first name and last name
        - adds booleans for notifications (chat and event)
        - adds a first_login boolean
     Fields:
        - id: PK autogenerated
        - email: User's email
        - first_name: User's first name
        - last_name: User's last_name
        - phone: User's phone number
        - is_active: Boolean holding whether the User is active or not
        - is_staff: Boolean designating whether the User is an administrator
        - first_login: Boolean designating whether a User logged in before

    """
    email = models.EmailField(_('email_address'), max_length=255, unique=True)
    first_name = models.CharField(_('first_name'), max_length=30)
    last_name = models.CharField(_('last_name'), max_length=30)
    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$', message="Phone number must be entered in the format: "
                                                                   "'+999999999'. Up to 15 digits allowed.")
    phone = models.CharField(validators=[phone_regex], max_length=17, blank=True)

    is_active = models.BooleanField(_('active'), default=True)
    is_staff = models.BooleanField(_('staff status'), default=False,
                                   help_text=_('Designate whether this user is an administrator'))
    first_login = models.BooleanField(default=True)

    objects = webappUsermanager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ('first_name', 'last_name',)

    class Meta:
        verbose_name = _('user')
        verbose_name_plural = _('users')

    def get_full_name(self):
        """
        :return: first_name + last_name, with a space in between.
        """
        full_name = '%s %s' % (self.first_name, self.last_name)
        return full_name.strip()

    def get_short_name(self):
        """
        :return: first_name
        """
        return self.first_name


class Location(models.Model):
    """
    Model defining a location
    Fields:
        - id: PK autogenerated
        - latitude: Latitude of the location
        - longitude: Longitude of the location
    """
    latitude = models.FloatField()
    longitude = models.FloatField()


class Event(models.Model):
    """
    Event model
    Fields:
        - id: PK autogenerated
        - title: Event title
        - start_date: Event start date (DATETIME format)
        - end_date: Event end date (DATETIME format)
        - start_location: FK to the start location of the event
        - end_location: FK to the end location of the event
        - start_city: Name of the city where @start_location is located
        - end_city: Name of the city where @end_location is located
        - emergency_contact: Phone number to call in case of emergency
        - winner_photo: Link to a photo of the event's winner
        - is_active: Boolean defining if the event is active
    """
    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$', message="Phone number must be entered in the format: "
                                                                   "'+999999999'. Up to 15 digits allowed.")

    title = models.CharField(max_length=255)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    start_location = models.ForeignKey(Location, on_delete=models.SET(-1), related_name="start_location")
    end_location = models.ForeignKey(Location, on_delete=models.SET(-1), related_name="end_location")
    start_city = models.CharField(max_length=255)
    end_city = models.CharField(max_length=255)
    emergency_contact = models.CharField(validators=[phone_regex], max_length=17)
    winner_photo = models.ImageField(upload_to='event_winners/')
    is_active = models.BooleanField(default=False)


class Team(models.Model):
    """
    Team model that defines teams for a specific event.
    Fields:
        - id: PK autogenerated
        - event_id: FK to model Event
        - is_disqualified: Boolean indicating whether a team is disqualified for this event
        - is_winner: Boolean indicating whether the team won the event defined by @event_id
        - timer_started: Boolean indicating whether the team's timer is running.
    """
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    is_disqualified = models.BooleanField(default=False)
    is_winner = models.BooleanField(default=False)
    timer_started = models.BooleanField(default=False)


class Challenge(models.Model):
    """
    Challenge model defining a challenge for a certain event
    Fields:
        - id: PK autogenerated
        - event_id: FK to the event the challenge is associated to
        - title: Title of the challenge
        - description: Description of the challenge
        - reward: Reward for the challenge (TIME)
    """
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    description = models.TextField()
    reward = models.DurationField()


class UserTeam(models.Model):
    """
    Model linking a User to a Team
    Fields:
        - id: PK autogenerated (not used)
        - user_id: FK to User
        - team_id: FK to team
    """
    user = models.ForeignKey(User, on_delete=models.SET(-1))
    team = models.ForeignKey(Team, on_delete=models.SET(-1))


class TeamChallenge(models.Model):
    """
    Model linking a team to a challenge
    Fields:
        id: PK autogenerated (not used)
        team_id: FK to a specific Team
        challenge_id: FK to a specific challenge
        location_id: FK to a specific location
        picture: Link to a picture taken for the challenge
        is_accepted: Boolean indicating whether a challenge submission is under review (false) or accepted (true)
    """
    team = models.ForeignKey(Team, on_delete=models.SET(-1))
    challenge = models.ForeignKey(Challenge, on_delete=models.SET(-1))
    location = models.ForeignKey(Location, on_delete=models.SET(-1))
    picture = models.ImageField(upload_to='challenge/')
    is_accepted = models.BooleanField(default=False)


class SubLocation(models.Model):
    """
    Model defining a sub-destination for an event
    Fields:
        - id: PK autogenerated (not used)
        - event_id: FK to a specific event
        - location_id: FK to a specific location
    """
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    location = models.ForeignKey(Location, on_delete=models.SET(-1))
    city = models.CharField(max_length=255, default="No name")
    order = models.IntegerField()


class TeamLocation(models.Model):
    """
    TeamLocation model - keeps track of when a team reaches a destination
    Fields:
        - id: PK autogenerated (not used)
        - team_id: FK to Team model
        - location_id: FK to Location model
        - segment: Segment team is on when reaching location
        - datetime: Date/time when the location was reached
    """
    team = models.ForeignKey(Team, on_delete=models.CASCADE)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    segment = models.IntegerField()
    datetime = models.DateTimeField()


class Score(models.Model):
    """
    Score model - keeps track of a team score
    Fields:
        - id: PK autogenerated
        - team_id: FK to Team model
        - start_location_id: FK to Location model
        - end_location_id: FK to Location model
        - time: time field containing the score
    """
    team = models.ForeignKey(Team, on_delete=models.CASCADE)
    start_location = models.ForeignKey(Location, on_delete=models.CASCADE, related_name='start_location_score')
    end_location = models.ForeignKey(Location, on_delete=models.CASCADE, related_name='end_location_score')
    time = models.DurationField()
